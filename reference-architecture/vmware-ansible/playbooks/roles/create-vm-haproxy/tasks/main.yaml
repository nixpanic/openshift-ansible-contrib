---
- name: Pick up host from host_inventory
  set_fact:
    host_data: "{{ item }}"
  with_dict: "{{ host_inventory }}"
  when: "'haproxy' == item.value.guesttype"

- name: Define parameters for DHCP network
  set_fact:
    network_parameters:
    - name: "{{ vm_network }}"
      type: "{{ vm_ipaddr_allocation_type }}"
      gateway: "{{ vm_gw }}"
  when: host_data | default({})

- name: Define parameters for static network
  set_fact:
    network_parameters: "{{ [network_parameters[0] |
                             combine({'ip': host_data.value.ip4addr,
                                      'netmask': vm_netmask})] }}"
  when:
  - "'static' == vm_ipaddr_allocation_type"
  - host_data | default({})

- name: Create haproxy VM on vCenter
  vmware_guest:
    hostname: "{{ vcenter_host }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: False
    name: "{{ host_data.value.guestname }}"
    cluster: "{{ vcenter_cluster}}"
    datacenter: "{{ vcenter_datacenter }}"
    resource_pool: "{{ vcenter_resource_pool }}"
    template: "{{vcenter_template_name}}"
    folder: "/{{ vcenter_folder }}"
    annotation: "{{ host_data.value.tag }}"
    state: poweredon
    wait_for_ip_address: true
    disk:
    - size_gb: 60
      datastore: "{{ vcenter_datastore }}"
      type: thin
    - size_gb: 40
      datastore: "{{ vcenter_datastore }}"
      type: thin
    - size_gb: 40
      datastore: "{{ vcenter_datastore }}"
      type: thin
    networks: "{{ network_parameters }}"
    customization:
      domain: "{{dns_zone}}"
      dns_servers:
      - "{{ vm_dns }}"
      dns_suffix: "{{dns_zone}}"
      hostname: "{{ host_data.value.guestname}}"
  register: facts
  when: host_data | default({})

- name: Add haproxy server to inventory
  add_host:
    hostname: "{{ host_data.value.guestname }}"
    ansible_fqdn: "{{ item.value.guestname }}.{{ dns_zone }}"
    ansible_ssh_host: "{{ facts.instance.hw_eth0.ipaddresses | ipv4 | first }}"
    groups: "{{ host_data.value.tag }}, haproxy_group"
    openshift_node_group_name: "node-config-haproxy"
  when: host_data | default({})
